#!/usr/bin/python

from functools import partial

from xml.dom import minidom
from xml.etree import ElementTree
from xml.etree.ElementTree import Element, SubElement

from mininet.cli import CLI
from mininet.log import info, setLogLevel
from mininet.net import Mininet
from mininet.node import Host, RemoteController
from mininet.topo import SingleSwitchTopo
from mininet.util import dumpNodeConnections


def prettify(elem):
    # Return a pretty-printed XML string for the Element.
    rough_string = ElementTree.tostring(elem, "utf-8")
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ")


def generateXSupplicantConf(host):
    top = Element("XsupplicantConfig",
                  {"version": "1.0",
                   "generated_data": "1/20/07"})
    SubElement(top, "Globals")
    devices = SubElement(top, "Devices")
    interface = SubElement(devices, "Interface")
    description = SubElement(interface, "Description")
    description.text = host.name + "-eth0"
    mac = SubElement(interface, "MAC")
    mac.text = host.MAC(host.name + "-eth0").replace(":", "-")
    wireless = SubElement(interface, "Wireless")
    wireless.text = "no"
    print prettify(top)
    host.cmd("echo " + "\'" + prettify(top) + "\'"
             + " > /etc/xsupplicant.conf")

def generateXSupplicantUserConf(host):
    top = Element("XSupplicantConfig",
                  {"version": "1.0",
                   "generated_data": "1/20/07"})
    connections = SubElement(top, "Connections")
    connection = SubElement(connections, "Connection")
    connectionName = SubElement(connection, "Name")
    connectionName.text = "test"
    connectionProfile = SubElement(connection, "Profile")
    connectionProfile.text = "test"
    connectionItf = SubElement(connection, "Interface")
    connectionItf.text = host.name + "-eth0"

    profiles = SubElement(top, "Profiles")
    profile = SubElement(profiles, "Profile")
    profileName = SubElement(profile, "Name")
    profileName.text = "test"
    profileIdentity = SubElement(profile, "Identity")
    profileIdentity.text = "TIS"
    profileEAP = SubElement(profile, "EAP")
    eapType = SubElement(profileEAP, "Type")
    eapType.text = "MD5"
    eapPasswd = SubElement(profileEAP, "Password")
    eapPasswd.text = "TIS"

    print prettify(top)
    host.cmd("echo " + "\'" + prettify(top) + "\'"
             + " > /etc/xsupplicant.user.conf ")

def launchNetwork():
    "Create and test a simple network"
    topo = SingleSwitchTopo(4)
    privateDirs = ["/tmp", "/etc", ("/var/log", "/tmp/%(name)s/var/log"),
                   "/var/run", "/var/mn"]
    host = partial(Host, privateDirs=privateDirs)
    net = Mininet(topo=topo, host=host, controller=RemoteController)
    net.start()
    directories = [directory[0] if isinstance(directory, tuple)
                   else directory for directory in privateDirs]
    info('Private Directories:', directories, '\n')

    for host in net.hosts:
        generateXSupplicantConf(host)
        generateXSupplicantUserConf(host)

    for host in net.hosts:
        host.cmd("xsupplicant")

    print "Dumping host connections"
    dumpNodeConnections(net.hosts)
    print "Testing network connectivity"
    net.pingAll()
    CLI(net)
    for host in net.hosts:
        host.cmd("kill %" + "xsupplicant")
    net.stop()


if __name__ == "__main__":
    setLogLevel("info")
    launchNetwork()
