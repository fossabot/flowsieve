#!/usr/bin/python

from functools import partial

from xml.dom import minidom
from xml.etree import ElementTree
from xml.etree.ElementTree import Element, SubElement

from mininet.cli import CLI
from mininet.log import setLogLevel
from mininet.net import Mininet
from mininet.node import Host, RemoteController
from mininet.topo import SingleSwitchTopo
from mininet.util import dumpNodeConnections


def prettify(elem):
    # Return a pretty-printed XML string for the Element.
    rough_string = ElementTree.tostring(elem, "utf-8")
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ")


def generate_xsupplicant_conf(host):
    top = Element("XsupplicantConfig",
                  {"version": "1.0",
                   "generated_data": "1/20/07"})
    SubElement(top, "Globals")
    devices = SubElement(top, "Devices")
    interface = SubElement(devices, "Interface")
    description = SubElement(interface, "Description")
    description.text = host.name + "-eth0"
    mac = SubElement(interface, "MAC")
    mac.text = host.MAC(host.name + "-eth0").replace(":", "-")
    wireless = SubElement(interface, "Wireless")
    wireless.text = "no"
    host.cmd("echo " + "\'" + prettify(top) + "\'" +
             " > /etc/xsupplicant.conf")


def generate_xsupplicant_user_conf(host):
    top = Element("XsupplicantConfig",
                  {"version": "1.0",
                   "generated_data": "1/20/07"})
    connections = SubElement(top, "Connections")
    connection = SubElement(connections, "Connection")
    connection_name = SubElement(connection, "Name")
    connection_name.text = "test"
    connection_profile = SubElement(connection, "Profile")
    connection_profile.text = "test"
    connection_itf = SubElement(connection, "Interface")
    connection_itf.text = host.name + "-eth0"

    profiles = SubElement(top, "Profiles")
    profile = SubElement(profiles, "Profile")
    profile_name = SubElement(profile, "Name")
    profile_name.text = "test"
    profile_identity = SubElement(profile, "Identity")
    profile_identity.text = "TIS"
    profile_eap = SubElement(profile, "EAP")
    eap_type = SubElement(profile_eap, "Type")
    eap_type.text = "MD5"
    eap_passwd = SubElement(profile_eap, "Password")
    eap_passwd.text = "TIS"

    host.cmd("echo " + "\'" + prettify(top) + "\'" +
             " > /etc/xsupplicant.user.conf ")


def launch_network():
    "Create and test a simple network"
    topo = SingleSwitchTopo(4)
    private_dirs = ["/tmp", "/etc", ("/var/log", "/tmp/%(name)s/var/log"),
                    "/var/run"]
    host = partial(Host, privateDirs=private_dirs)
    net = Mininet(topo=topo, host=host, controller=RemoteController)
    net.start()

    for host in net.hosts:
        generate_xsupplicant_conf(host)
        generate_xsupplicant_user_conf(host)

    for host in net.hosts:
        host.cmd("xsupplicant")

    print "Dumping host connections"
    dumpNodeConnections(net.hosts)

    CLI(net)

    for host in net.hosts:
        host.cmd("kill %" + "xsupplicant")
    net.stop()


if __name__ == "__main__":
    setLogLevel("info")
    launch_network()
