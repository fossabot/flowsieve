#!/usr/bin/python
import os
import sys

from functools import partial

from jinja2 import Environment, FileSystemLoader

from mininet.cli import CLI
from mininet.log import setLogLevel
from mininet.net import Mininet
from mininet.node import Host, RemoteController
from mininet.topo import SingleSwitchTopo
from mininet.util import dumpNodeConnections


def generate_xsupplicant_conf(host):
    env = Environment(loader=FileSystemLoader("/vagrant/tool/template/"))
    tpl_conf = env.get_template("xsupplicant.tpl.conf")

    if_name = host.name + "-eth0"
    conf = tpl_conf.render({"if_name": if_name,
                            "mac_addr": host.MAC(if_name).replace(":", "-")})
    host.cmd("echo '%s' > /etc/xsupplicant.conf" % conf)


def generate_xsupplicant_user_conf(host):
    sys.path.append(
        os.path.abspath(
            os.path.join(
                os.path.abspath(os.path.dirname(__file__)), "..")))
    from yamada.user_store import UserStore

    env = Environment(loader=FileSystemLoader("/vagrant/tool/template/"))
    tpl_user_conf = env.get_template("xsupplicant.tpl.user.conf")
    if_name = host.name + "-eth0"
    profiles = UserStore().users.values()
    user_conf = tpl_user_conf.render({"if_name": if_name,
                                      "profiles": profiles})
    host.cmd("echo '%s' > /etc/xsupplicant.user.conf " % user_conf)


def launch_network():
    "Create and test a simple network"
    topo = SingleSwitchTopo(4)
    private_dirs = ["/tmp", "/etc", ("/var/log", "/var/%(name)s/log"),
                    "/var/run"]
    host = partial(Host, privateDirs=private_dirs)
    net = Mininet(topo=topo, host=host, controller=RemoteController)
    net.start()

    for host in net.hosts:
        generate_xsupplicant_conf(host)
        generate_xsupplicant_user_conf(host)

    for host in net.hosts:
        host.cmd("xsupplicant")

    print "Dumping host connections"
    dumpNodeConnections(net.hosts)

    CLI(net)

    for host in net.hosts:
        host.cmd("killall xsupplicant")
    net.stop()


if __name__ == "__main__":
    setLogLevel("info")
    launch_network()
